name: Build from Issue Comment

on:
  issue_comment:
    types: [created]

jobs:
  check-and-build:
    if: |
      github.event.issue.pull_request == null &&
      startsWith(github.event.comment.body, '/build')
    runs-on: ubuntu-latest
    permissions:
      actions: write
      contents: write
      issues: write
      pull-requests: write
      statuses: write
      checks: write

    steps:
      - name: Check if user is core contributor
        id: check-permission
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const comment = context.payload.comment;
            const commenter = comment.user.login;

            // Check if user has write permission (core contributor)
            try {
              const { data: permission } = await github.rest.repos.getCollaboratorPermissionLevel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                username: commenter
              });

              if (!['admin', 'write'].includes(permission.permission)) {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: `@${commenter} Sorry, only core contributors can trigger builds.`
                });
                core.setFailed('User does not have write permission');
              }

              console.log(`User ${commenter} has ${permission.permission} permission`);
            } catch (error) {
              console.error('Permission check failed:', error);
              core.setFailed('Permission check failed');
            }

      - name: React to comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: context.payload.comment.id,
              content: 'rocket'
            });

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate branch name
        id: branch
        run: |
          ISSUE_NUMBER="${{ github.event.issue.number }}"
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          BRANCH_NAME="claude-build/issue-${ISSUE_NUMBER}-${TIMESTAMP}"
          echo "name=${BRANCH_NAME}" >> $GITHUB_OUTPUT

      - name: Create new branch
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git checkout -b ${{ steps.branch.outputs.name }}

      - name: Get issue details
        id: issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue = context.payload.issue;
            const issueBody = issue.body || '';
            const issueTitle = issue.title || '';

            // Save issue details for Claude
            const fs = require('fs');
            fs.writeFileSync('issue_description.txt', issueBody);

            // Sanitize title for shell usage by escaping special characters
            const sanitizedTitle = issueTitle
              .replace(/\\/g, '\\\\')
              .replace(/'/g, "'\\''")
              .replace(/"/g, '\\"')
              .replace(/`/g, '\\`')
              .replace(/\$/g, '\\$')
              .replace(/!/g, '\\!');

            // Output for later steps
            core.setOutput('title', issueTitle);
            core.setOutput('sanitized_title', sanitizedTitle);
            core.setOutput('body', issueBody);
            core.setOutput('number', issue.number);

      - name: Install and run Claude Code CLI
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          # Install Claude Code CLI
          npm install -g claude-code

          # Create a comprehensive prompt for Claude
          cat > claude_prompt.txt << 'PROMPT_END'
          Fix issue #${{ github.event.issue.number }}: ${{ steps.issue.outputs.title }}

          Issue description:
          ${{ steps.issue.outputs.body }}

          Instructions:
          1. Analyze the issue description carefully
          2. Search through the codebase to understand the current implementation
          3. Implement the actual code changes needed to fix this issue
          4. Modify existing files or create new ones as needed
          5. Follow the existing code patterns and conventions
          6. Make sure your changes are complete and functional

          This is a real repository - make actual code changes to fix the issue, not just documentation.
          PROMPT_END

          # Run Claude Code with the prompt
          claude-code run "$(cat claude_prompt.txt)" --yes --model claude-3-5-sonnet-20241022

          # Remove any temporary files Claude Code might have created
          rm -f claude_prompt.txt issue_description.txt output.txt 2>/dev/null || true

          # Show what files were changed
          echo "Files changed:"
          git status --short

      - name: Check for changes
        id: changes
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit and push changes
        if: steps.changes.outputs.has_changes == 'true'
        run: |
          git add -A
          git commit -m "Implement changes for issue #${{ github.event.issue.number }}: ${{ steps.issue.outputs.sanitized_title }}"
          git push origin ${{ steps.branch.outputs.name }}

      - name: Generate PR description with Claude
        if: steps.changes.outputs.has_changes == 'true'
        id: pr-description
        uses: anthropics/claude-code-action@main
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          prompt: |
            Based on the git diff of the changes just made, generate:
            1. A concise PR title (max 72 characters)
            2. A detailed PR description explaining what was changed and why
            3. A summary comment for the original issue

            Original issue: #${{ github.event.issue.number }} - ${{ steps.issue.outputs.title }}

            Git diff:
            $(git diff HEAD~1)

            Format your response as JSON with these keys:
            - pr_title: The PR title
            - pr_description: The PR description (can use markdown)
            - issue_comment: A summary for the issue comment
          github_token: ${{ secrets.GITHUB_TOKEN }}
          output_format: json

      - name: Create Pull Request
        if: steps.changes.outputs.has_changes == 'true'
        id: create-pr
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            let prData;
            try {
              // Try to parse the Claude response as JSON
              const claudeResponse = `${{ steps.pr-description.outputs.response }}`;
              prData = JSON.parse(claudeResponse);
            } catch {
              // Fallback if JSON parsing fails
              prData = {
                pr_title: `Fix: Issue #${{ github.event.issue.number }} - ${{ steps.issue.outputs.sanitized_title }}`,
                pr_description: `Automated implementation of issue #${{ github.event.issue.number }}`,
                issue_comment: 'Pull request created with automated changes.'
              };
            }

            // Create the PR
            const pr = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: prData.pr_title || `Fix: Issue #${{ github.event.issue.number }}`,
              body: `${prData.pr_description || 'Automated implementation'}\n\n---\n\nCloses #${{ github.event.issue.number }}\n\n@codex Please review this PR`,
              head: '${{ steps.branch.outputs.name }}',
              base: 'main'
            });

            core.setOutput('pr_number', pr.data.number);
            core.setOutput('pr_url', pr.data.html_url);
            core.setOutput('issue_comment', prData.issue_comment || 'Pull request created.');

      - name: Comment on issue with PR link
        if: steps.changes.outputs.has_changes == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ github.event.issue.number }},
              body: `ðŸ¤– Build triggered successfully!\n\n${{ steps.create-pr.outputs.issue_comment }}\n\nPull Request: #${{ steps.create-pr.outputs.pr_number }}\n\n@codex has been tagged for review.`
            });

      - name: Handle no changes
        if: steps.changes.outputs.has_changes == 'false'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ github.event.issue.number }},
              body: `No changes were needed based on the issue description. The codebase may already satisfy the requirements or additional clarification may be needed.`
            });